{
  "swagger": "2.0",
  "info": {
    "title": "localhost",
    "version": "1.0"
  },
  "host": "localhost",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/addresses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "tags": [
          "addresses"
        ],
        "operationId": "readAll",
        "summary": "Fetch addresses"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "addresses"
        ],
        "operationId": "create",
        "summary": "Creates an address.  See Address model for details."
      }
    },
    "/addresses/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "404": {
            "description": "address not found"
          }
        },
        "tags": [
          "addresses"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays addresses that meet the property=value search criteria"
      }
    },
    "/addresses/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of address to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "404": {
            "description": "address not found"
          }
        },
        "tags": [
          "addresses"
        ],
        "operationId": "delete",
        "summary": "Deletes an address"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of address to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "404": {
            "description": "address not found"
          }
        },
        "tags": [
          "addresses"
        ],
        "operationId": "read",
        "summary": "Displays an address"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of address to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "addresses"
        ],
        "operationId": "update",
        "summary": "Updates an address.  See the Address model for details."
      }
    },
    "/branchesofservice": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/BranchOfService"
            }
          }
        },
        "tags": [
          "branchesofservice"
        ],
        "operationId": "readAll",
        "summary": "Fetch branches of service"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/BranchOfService"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "branchesofservice"
        ],
        "operationId": "create",
        "summary": "Creates a branch of service.  See BranchOfService model for details."
      }
    },
    "/branchesofservice/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/BranchOfService"
            }
          },
          "404": {
            "description": "branch of service not found"
          }
        },
        "tags": [
          "branchesofservice"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays branches of service that meet the property=value search criteria"
      }
    },
    "/branchesofservice/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of branch of service to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/BranchOfService"
            }
          },
          "404": {
            "description": "branch of service not found"
          }
        },
        "tags": [
          "branchesofservice"
        ],
        "operationId": "delete",
        "summary": "Deletes a branch of service."
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of branch of service to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/BranchOfService"
            }
          },
          "404": {
            "description": "branch of service not found"
          }
        },
        "tags": [
          "branchesofservice"
        ],
        "operationId": "read",
        "summary": "Displays a branch of service."
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of branch of service to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/BranchOfService"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "branchesofservice"
        ],
        "operationId": "update",
        "summary": "Updates a branch of service.  See the BranchOfService model for details."
      }
    },
    "/citydata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityData"
            }
          }
        },
        "tags": [
          "citydata"
        ],
        "operationId": "readAll",
        "summary": "Fetch all city data"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityData"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "citydata"
        ],
        "operationId": "create",
        "summary": "Creates city data.  See CityData model for details."
      }
    },
    "/citydata/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityData"
            }
          },
          "404": {
            "description": "city data not found"
          }
        },
        "tags": [
          "citydata"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays city data that meet the property=value search criteria"
      }
    },
    "/citydata/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of city data to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityData"
            }
          },
          "404": {
            "description": "city data not found"
          }
        },
        "tags": [
          "citydata"
        ],
        "operationId": "delete",
        "summary": "Deletes city data record"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of city data to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityData"
            }
          },
          "404": {
            "description": "city data not found"
          }
        },
        "tags": [
          "citydata"
        ],
        "operationId": "read",
        "summary": "Displays city data"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of city data to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityData"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "citydata"
        ],
        "operationId": "update",
        "summary": "Updates city data.  See the CityData model for details."
      }
    },
    "/citydataextended": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityDataExtended"
            }
          }
        },
        "tags": [
          "citydataextended"
        ],
        "operationId": "readAll",
        "summary": "Fetch extended city data"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityDataExtended"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "citydataextended"
        ],
        "operationId": "create",
        "summary": "Creates an extended city data record.  See CityDataExtended model for details."
      }
    },
    "/citydataextended/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityDataExtended"
            }
          },
          "404": {
            "description": "extended city data not found"
          }
        },
        "tags": [
          "citydataextended"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays extended city data that meet the property=value search criteria"
      }
    },
    "/citydataextended/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of extended city data record to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityDataExtended"
            }
          },
          "404": {
            "description": "extended city data not found"
          }
        },
        "tags": [
          "citydataextended"
        ],
        "operationId": "delete",
        "summary": "Deletes an extended city data record"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of extended city data to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityDataExtended"
            }
          },
          "404": {
            "description": "extended city data not found"
          }
        },
        "tags": [
          "citydataextended"
        ],
        "operationId": "read",
        "summary": "Displays an extended city data record"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of extended city data record to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CityDataExtended"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "citydataextended"
        ],
        "operationId": "update",
        "summary": "Updates an extended city data record.  See the CityDataExtended model for details."
      }
    },
    "/clientethnicities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientEthnicity"
            }
          }
        },
        "tags": [
          "clientethnicities"
        ],
        "operationId": "readAll",
        "summary": "Fetch client ethnicities"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientEthnicity"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "clientethnicities"
        ],
        "operationId": "create",
        "summary": "Creates a client ethnicity record.  See ClientEthnicity model for details."
      }
    },
    "/clientethnicities/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientEthnicity"
            }
          },
          "404": {
            "description": "client ethnicity not found"
          }
        },
        "tags": [
          "clientethnicities"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays client ethnicity that meet the property=value search criteria"
      }
    },
    "/clientethnicities/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client ethnicity to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientEthnicity"
            }
          },
          "404": {
            "description": "client ethnicity not found"
          }
        },
        "tags": [
          "clientethnicities"
        ],
        "operationId": "delete",
        "summary": "Deletes a client ethnicity"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client ethnicity to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientEthnicity"
            }
          },
          "404": {
            "description": "client ethnicity not found"
          }
        },
        "tags": [
          "clientethnicities"
        ],
        "operationId": "read",
        "summary": "Displays a client ethnicity"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client ethnicity to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientEthnicity"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "clientethnicities"
        ],
        "operationId": "update",
        "summary": "Updates a client ethnicity record.  See the ClientEthnicity model for details."
      }
    },
    "/clientlanguages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientLanguage"
            }
          }
        },
        "tags": [
          "clientlanguages"
        ],
        "operationId": "readAll",
        "summary": "Fetch client languages"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientLanguage"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "clientlanguages"
        ],
        "operationId": "create",
        "summary": "Creates a client language.  See ClientLanguage model for details."
      }
    },
    "/clientlanguages/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientLanguage"
            }
          },
          "404": {
            "description": "client language not found"
          }
        },
        "tags": [
          "clientlanguages"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays client languages that meet the property=value search criteria"
      }
    },
    "/clientlanguages/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client language to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientLanguage"
            }
          },
          "404": {
            "description": "client language not found"
          }
        },
        "tags": [
          "clientlanguages"
        ],
        "operationId": "delete",
        "summary": "Deletes a client language record"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client language record to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientLanguage"
            }
          },
          "404": {
            "description": "client language not found"
          }
        },
        "tags": [
          "clientlanguages"
        ],
        "operationId": "read",
        "summary": "Displays a client language record"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client language record to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ClientLanguage"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "clientlanguages"
        ],
        "operationId": "update",
        "summary": "Updates a client language record.  See the ClientLanguage model for details."
      }
    },
    "/clients": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        },
        "tags": [
          "clients"
        ],
        "operationId": "readAll",
        "summary": "Fetch clients"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "clients"
        ],
        "operationId": "create",
        "summary": "Creates a client.  See Client model for details."
      }
    },
    "/clients/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "404": {
            "description": "client not found"
          }
        },
        "tags": [
          "clients"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays clients that meet the property=value search criteria"
      }
    },
    "/clients/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "404": {
            "description": "client not found"
          }
        },
        "tags": [
          "clients"
        ],
        "operationId": "delete",
        "summary": "Deletes a client"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "404": {
            "description": "client not found"
          }
        },
        "tags": [
          "clients"
        ],
        "operationId": "read",
        "summary": "Displays a client"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of client to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "clients"
        ],
        "operationId": "update",
        "summary": "Updates a client.  See the Client model for details."
      }
    },
    "/counseleechildbioparents": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildBioParent"
            }
          }
        },
        "tags": [
          "counseleechildbioparents"
        ],
        "operationId": "readAll",
        "summary": "Fetch counselee child bio parents"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildBioParent"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildbioparents"
        ],
        "operationId": "create",
        "summary": "Creates a counselee child bio parent record.  See CounseleeChildBioParent model for details."
      }
    },
    "/counseleechildbioparents/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildBioParent"
            }
          },
          "404": {
            "description": "counselee child bio parent not found"
          }
        },
        "tags": [
          "counseleechildbioparents"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays counselee child bio parents that meet the property=value search criteria"
      }
    },
    "/counseleechildbioparents/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of counselee child bio parent to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildBioParent"
            }
          },
          "404": {
            "description": "counselee child bio parent not found"
          }
        },
        "tags": [
          "counseleechildbioparents"
        ],
        "operationId": "delete",
        "summary": "Deletes a counselee child bio parent record"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of counselee child bio parent record to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildBioParent"
            }
          },
          "404": {
            "description": "counselee child bio parent not found"
          }
        },
        "tags": [
          "counseleechildbioparents"
        ],
        "operationId": "read",
        "summary": "Displays a counselee child bio parent record"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of counselee child bio parent to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildBioParent"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildbioparents"
        ],
        "operationId": "update",
        "summary": "Updates a counselee child bio parent record.  See the CounseleeChldBioParent model for details."
      }
    },
    "/counseleechildguardians": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildGuardian"
            }
          }
        },
        "tags": [
          "counseleechildguardians"
        ],
        "operationId": "readAll",
        "summary": "Fetch counseleechildguardian"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildGuardian"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildguardians"
        ],
        "operationId": "create",
        "summary": "Creates a CounseleeChildGuardian.  See CounseleeChildGuardian model for details."
      }
    },
    "/counseleechildguardians/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildGuardian"
            }
          },
          "404": {
            "description": "CounseleeChildGuardian not found"
          }
        },
        "tags": [
          "counseleechildguardians"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays counseleechildguardian that meet the property=value search criteria"
      }
    },
    "/counseleechildguardians/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeChildGuardian to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildGuardian"
            }
          },
          "404": {
            "description": "CounseleeChildGuardian not found"
          }
        },
        "tags": [
          "counseleechildguardians"
        ],
        "operationId": "delete",
        "summary": "Deletes a CounseleeChildGuardian"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeChildGuardian to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildGuardian"
            }
          },
          "404": {
            "description": "CounseleeChildGuardian not found"
          }
        },
        "tags": [
          "counseleechildguardians"
        ],
        "operationId": "read",
        "summary": "Displays a CounseleeChildGuardian"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeChildGuardian to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildGuardian"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildguardians"
        ],
        "operationId": "update",
        "summary": "Updates a CounseleeChildGuardian.  See the CounseleeChildGuardian model for details."
      }
    },
    "/counseleechildren": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChild"
            }
          }
        },
        "tags": [
          "counseleechildren"
        ],
        "operationId": "readAll",
        "summary": "Fetch counselee children"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChild"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildren"
        ],
        "operationId": "create",
        "summary": "Creates a counselee child.  See CounseleeChild model for details."
      }
    },
    "/counseleechildren/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChild"
            }
          },
          "404": {
            "description": "veteran not found"
          }
        },
        "tags": [
          "counseleechildren"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays counselee children that meet the property=value search criteria"
      }
    },
    "/counseleechildren/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of counselee child to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChild"
            }
          },
          "404": {
            "description": "counselee child not found"
          }
        },
        "tags": [
          "counseleechildren"
        ],
        "operationId": "delete",
        "summary": "Deletes a counselee child"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of counselee child to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChild"
            }
          },
          "404": {
            "description": "counselee child not found"
          }
        },
        "tags": [
          "counseleechildren"
        ],
        "operationId": "read",
        "summary": "Displays a counselee child"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of counselee child to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChild"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildren"
        ],
        "operationId": "update",
        "summary": "Updates a counselee child.  See the CounseleeChild model for details."
      }
    },
    "/counseleechildsiblings": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildSibling"
            }
          }
        },
        "tags": [
          "counseleechildsiblings"
        ],
        "operationId": "readAll",
        "summary": "Fetch CounseleeChildSibling"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildSibling"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildsiblings"
        ],
        "operationId": "create",
        "summary": "Creates a CounseleeChildSibling.  See CounseleeChildSibling model for details."
      }
    },
    "/counseleechildsiblings/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildSibling"
            }
          },
          "404": {
            "description": "CounseleeChildSibling not found"
          }
        },
        "tags": [
          "counseleechildsiblings"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays CounseleeChildSibling that meet the property=value search criteria"
      }
    },
    "/counseleechildsiblings/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeChildSibling to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildSibling"
            }
          },
          "404": {
            "description": "CounseleeChildSibling not found"
          }
        },
        "tags": [
          "counseleechildsiblings"
        ],
        "operationId": "delete",
        "summary": "Deletes a CounseleeChildSibling"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeChildSibling to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildSibling"
            }
          },
          "404": {
            "description": "CounseleeChildSibling not found"
          }
        },
        "tags": [
          "counseleechildsiblings"
        ],
        "operationId": "read",
        "summary": "Displays a CounseleeChildSibling"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeChildSibling to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeChildSibling"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleechildsiblings"
        ],
        "operationId": "update",
        "summary": "Updates a CounseleeChildSibling.  See the CounseleeChildSibling model for details."
      }
    },
    "/counseleecounselingtopics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeCounselingTopic"
            }
          }
        },
        "tags": [
          "counseleecounselingtopics"
        ],
        "operationId": "readAll",
        "summary": "Fetch CounseleeCounselingTopic"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeCounselingTopic"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleecounselingtopics"
        ],
        "operationId": "create",
        "summary": "Creates a CounseleeCounselingTopic.  See CounseleeCounselingTopic model for details."
      }
    },
    "/counseleecounselingtopics/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeCounselingTopic"
            }
          },
          "404": {
            "description": "CounseleeCounselingTopic not found"
          }
        },
        "tags": [
          "counseleecounselingtopics"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays CounseleeCounselingTopic that meet the property=value search criteria"
      }
    },
    "/counseleecounselingtopics/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeCounselingTopic to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeCounselingTopic"
            }
          },
          "404": {
            "description": "CounseleeCounselingTopic not found"
          }
        },
        "tags": [
          "counseleecounselingtopics"
        ],
        "operationId": "delete",
        "summary": "Deletes a CounseleeCounselingTopic"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeCounselingTopic to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeCounselingTopic"
            }
          },
          "404": {
            "description": "CounseleeCounselingTopic not found"
          }
        },
        "tags": [
          "counseleecounselingtopics"
        ],
        "operationId": "read",
        "summary": "Displays a CounseleeCounselingTopic"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeCounselingTopic to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeCounselingTopic"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleecounselingtopics"
        ],
        "operationId": "update",
        "summary": "Updates a CounseleeCounselingTopic.  See the CounseleeCounselingTopic model for details."
      }
    },
    "/counseleedruguses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeDrugUse"
            }
          }
        },
        "tags": [
          "counseleedruguses"
        ],
        "operationId": "readAll",
        "summary": "Fetch CounseleeDrugUse"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeDrugUse"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleedruguses"
        ],
        "operationId": "create",
        "summary": "Creates a CounseleeDrugUse.  See CounseleeDrugUse model for details."
      }
    },
    "/counseleedruguses/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeDrugUse"
            }
          },
          "404": {
            "description": "CounseleeDrugUse not found"
          }
        },
        "tags": [
          "counseleedruguses"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays CounseleeDrugUse that meet the property=value search criteria"
      }
    },
    "/counseleedruguses/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeDrugUse to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeDrugUse"
            }
          },
          "404": {
            "description": "CounseleeDrugUse not found"
          }
        },
        "tags": [
          "counseleedruguses"
        ],
        "operationId": "delete",
        "summary": "Deletes a CounseleeDrugUse"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeDrugUse to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeDrugUse"
            }
          },
          "404": {
            "description": "CounseleeDrugUse not found"
          }
        },
        "tags": [
          "counseleedruguses"
        ],
        "operationId": "read",
        "summary": "Displays a CounseleeDrugUse"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeDrugUse to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeDrugUse"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleedruguses"
        ],
        "operationId": "update",
        "summary": "Updates a CounseleeDrugUse.  See the CounseleeDrugUse model for details."
      }
    },
    "/counseleemedications": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeMedication"
            }
          }
        },
        "tags": [
          "counseleemedications"
        ],
        "operationId": "readAll",
        "summary": "Fetch CounseleeMedication"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeMedication"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleemedications"
        ],
        "operationId": "create",
        "summary": "Creates a CounseleeMedication.  See CounseleeMedication model for details."
      }
    },
    "/counseleemedications/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeMedication"
            }
          },
          "404": {
            "description": "CounseleeMedication not found"
          }
        },
        "tags": [
          "counseleemedications"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays CounseleeMedication that meet the property=value search criteria"
      }
    },
    "/counseleemedications/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeMedication to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeMedication"
            }
          },
          "404": {
            "description": "CounseleeMedication not found"
          }
        },
        "tags": [
          "counseleemedications"
        ],
        "operationId": "delete",
        "summary": "Deletes a CounseleeMedication"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeMedication to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeMedication"
            }
          },
          "404": {
            "description": "CounseleeMedication not found"
          }
        },
        "tags": [
          "counseleemedications"
        ],
        "operationId": "read",
        "summary": "Displays a CounseleeMedication"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounseleeMedication to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounseleeMedication"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counseleemedications"
        ],
        "operationId": "update",
        "summary": "Updates a CounseleeMedication.  See the CounseleeMedication model for details."
      }
    },
    "/counselees": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Counselee"
            }
          }
        },
        "tags": [
          "counselees"
        ],
        "operationId": "readAll",
        "summary": "Fetch Counselee"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Counselee"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counselees"
        ],
        "operationId": "create",
        "summary": "Creates a Counselee.  See Counselee model for details."
      }
    },
    "/counselees/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Counselee"
            }
          },
          "404": {
            "description": "Counselee not found"
          }
        },
        "tags": [
          "counselees"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Counselee that meet the property=value search criteria"
      }
    },
    "/counselees/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Counselee to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Counselee"
            }
          },
          "404": {
            "description": "Counselee not found"
          }
        },
        "tags": [
          "counselees"
        ],
        "operationId": "delete",
        "summary": "Deletes a Counselee"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Counselee to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Counselee"
            }
          },
          "404": {
            "description": "Counselee not found"
          }
        },
        "tags": [
          "counselees"
        ],
        "operationId": "read",
        "summary": "Displays a Counselee"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Counselee to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Counselee"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counselees"
        ],
        "operationId": "update",
        "summary": "Updates a Counselee.  See the Counselee model for details."
      }
    },
    "/counselingtopics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounselingTopic"
            }
          }
        },
        "tags": [
          "counselingtopics"
        ],
        "operationId": "readAll",
        "summary": "Fetch CounselingTopic"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounselingTopic"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counselingtopics"
        ],
        "operationId": "create",
        "summary": "Creates a CounselingTopic.  See CounselingTopic model for details."
      }
    },
    "/counselingtopics/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounselingTopic"
            }
          },
          "404": {
            "description": "CounselingTopic not found"
          }
        },
        "tags": [
          "counselingtopics"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays CounselingTopic that meet the property=value search criteria"
      }
    },
    "/counselingtopics/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounselingTopic to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounselingTopic"
            }
          },
          "404": {
            "description": "CounselingTopic not found"
          }
        },
        "tags": [
          "counselingtopics"
        ],
        "operationId": "delete",
        "summary": "Deletes a CounselingTopic"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounselingTopic to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounselingTopic"
            }
          },
          "404": {
            "description": "CounselingTopic not found"
          }
        },
        "tags": [
          "counselingtopics"
        ],
        "operationId": "read",
        "summary": "Displays a CounselingTopic"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CounselingTopic to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CounselingTopic"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "counselingtopics"
        ],
        "operationId": "update",
        "summary": "Updates a CounselingTopic.  See the CounselingTopic model for details."
      }
    },
    "/countydata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CountyData"
            }
          }
        },
        "tags": [
          "countydata"
        ],
        "operationId": "readAll",
        "summary": "Fetch CountyData"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CountyData"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "countydata"
        ],
        "operationId": "create",
        "summary": "Creates a CountyData.  See CountyData model for details."
      }
    },
    "/countydata/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CountyData"
            }
          },
          "404": {
            "description": "CountyData not found"
          }
        },
        "tags": [
          "countydata"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays CountyData that meet the property=value search criteria"
      }
    },
    "/countydata/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CountyData to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CountyData"
            }
          },
          "404": {
            "description": "CountyData not found"
          }
        },
        "tags": [
          "countydata"
        ],
        "operationId": "delete",
        "summary": "Deletes a CountyData"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CountyData to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CountyData"
            }
          },
          "404": {
            "description": "CountyData not found"
          }
        },
        "tags": [
          "countydata"
        ],
        "operationId": "read",
        "summary": "Displays a CountyData"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of CountyData to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/CountyData"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "countydata"
        ],
        "operationId": "update",
        "summary": "Updates a CountyData.  See the CountyData model for details."
      }
    },
    "/druguses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DrugUse"
            }
          }
        },
        "tags": [
          "druguses"
        ],
        "operationId": "readAll",
        "summary": "Fetch DrugUse"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DrugUse"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "druguses"
        ],
        "operationId": "create",
        "summary": "Creates a DrugUse.  See DrugUse model for details."
      }
    },
    "/druguses/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DrugUse"
            }
          },
          "404": {
            "description": "DrugUse not found"
          }
        },
        "tags": [
          "druguses"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays DrugUse that meet the property=value search criteria"
      }
    },
    "/druguses/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of DrugUse to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DrugUse"
            }
          },
          "404": {
            "description": "DrugUse not found"
          }
        },
        "tags": [
          "druguses"
        ],
        "operationId": "delete",
        "summary": "Deletes a DrugUse"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of DrugUse to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DrugUse"
            }
          },
          "404": {
            "description": "DrugUse not found"
          }
        },
        "tags": [
          "druguses"
        ],
        "operationId": "read",
        "summary": "Displays a DrugUse"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of DrugUse to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/DrugUse"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "druguses"
        ],
        "operationId": "update",
        "summary": "Updates a DrugUse.  See the DrugUse model for details."
      }
    },
    "/ethnicities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Ethnicity"
            }
          }
        },
        "tags": [
          "ethnicities"
        ],
        "operationId": "readAll",
        "summary": "Fetch Ethnicity"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Ethnicity"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "ethnicities"
        ],
        "operationId": "create",
        "summary": "Creates a Ethnicity.  See Ethnicity model for details."
      }
    },
    "/ethnicities/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Ethnicity"
            }
          },
          "404": {
            "description": "Ethnicity not found"
          }
        },
        "tags": [
          "ethnicities"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Ethnicity that meet the property=value search criteria"
      }
    },
    "/ethnicities/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Ethnicity to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Ethnicity"
            }
          },
          "404": {
            "description": "Ethnicity not found"
          }
        },
        "tags": [
          "ethnicities"
        ],
        "operationId": "delete",
        "summary": "Deletes a Ethnicity"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Ethnicity to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Ethnicity"
            }
          },
          "404": {
            "description": "Ethnicity not found"
          }
        },
        "tags": [
          "ethnicities"
        ],
        "operationId": "read",
        "summary": "Displays a Ethnicity"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Ethnicity to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Ethnicity"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "ethnicities"
        ],
        "operationId": "update",
        "summary": "Updates a Ethnicity.  See the Ethnicity model for details."
      }
    },
    "/fundingsources": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FundingSource"
            }
          }
        },
        "tags": [
          "fundingsources"
        ],
        "operationId": "readAll",
        "summary": "Fetch FundingSource"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FundingSource"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "fundingsources"
        ],
        "operationId": "create",
        "summary": "Creates a FundingSource.  See FundingSource model for details."
      }
    },
    "/fundingsources/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FundingSource"
            }
          },
          "404": {
            "description": "FundingSource not found"
          }
        },
        "tags": [
          "fundingsources"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays FundingSource that meet the property=value search criteria"
      }
    },
    "/fundingsources/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of FundingSource to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FundingSource"
            }
          },
          "404": {
            "description": "FundingSource not found"
          }
        },
        "tags": [
          "fundingsources"
        ],
        "operationId": "delete",
        "summary": "Deletes a FundingSource"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of FundingSource to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FundingSource"
            }
          },
          "404": {
            "description": "FundingSource not found"
          }
        },
        "tags": [
          "fundingsources"
        ],
        "operationId": "read",
        "summary": "Displays a FundingSource"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of FundingSource to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/FundingSource"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "fundingsources"
        ],
        "operationId": "update",
        "summary": "Updates a FundingSource.  See the FundingSource model for details."
      }
    },
    "/genders": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Gender"
            }
          }
        },
        "tags": [
          "genders"
        ],
        "operationId": "readAll",
        "summary": "Fetch Gender"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Gender"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "genders"
        ],
        "operationId": "create",
        "summary": "Creates a Gender.  See Gender model for details."
      }
    },
    "/genders/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Gender"
            }
          },
          "404": {
            "description": "Gender not found"
          }
        },
        "tags": [
          "genders"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Gender that meet the property=value search criteria"
      }
    },
    "/genders/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Gender to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Gender"
            }
          },
          "404": {
            "description": "Gender not found"
          }
        },
        "tags": [
          "genders"
        ],
        "operationId": "delete",
        "summary": "Deletes a Gender"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Gender to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Gender"
            }
          },
          "404": {
            "description": "Gender not found"
          }
        },
        "tags": [
          "genders"
        ],
        "operationId": "read",
        "summary": "Displays a Gender"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Gender to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Gender"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "genders"
        ],
        "operationId": "update",
        "summary": "Updates a Gender.  See the Gender model for details."
      }
    },
    "/identitypreferences": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/IdentityPreference"
            }
          }
        },
        "tags": [
          "identitypreferences"
        ],
        "operationId": "readAll",
        "summary": "Fetch IdentityPreference"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/IdentityPreference"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "identitypreferences"
        ],
        "operationId": "create",
        "summary": "Creates a IdentityPreference.  See IdentityPreference model for details."
      }
    },
    "/identitypreferences/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/IdentityPreference"
            }
          },
          "404": {
            "description": "IdentityPreference not found"
          }
        },
        "tags": [
          "identitypreferences"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays IdentityPreference that meet the property=value search criteria"
      }
    },
    "/identitypreferences/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of IdentityPreference to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/IdentityPreference"
            }
          },
          "404": {
            "description": "IdentityPreference not found"
          }
        },
        "tags": [
          "identitypreferences"
        ],
        "operationId": "delete",
        "summary": "Deletes a IdentityPreference"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of IdentityPreference to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/IdentityPreference"
            }
          },
          "404": {
            "description": "IdentityPreference not found"
          }
        },
        "tags": [
          "identitypreferences"
        ],
        "operationId": "read",
        "summary": "Displays a IdentityPreference"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of IdentityPreference to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/IdentityPreference"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "identitypreferences"
        ],
        "operationId": "update",
        "summary": "Updates a IdentityPreference.  See the IdentityPreference model for details."
      }
    },
    "/languages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Language"
            }
          }
        },
        "tags": [
          "languages"
        ],
        "operationId": "readAll",
        "summary": "Fetch Language"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Language"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "languages"
        ],
        "operationId": "create",
        "summary": "Creates a Language.  See Language model for details."
      }
    },
    "/languages/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Language"
            }
          },
          "404": {
            "description": "Language not found"
          }
        },
        "tags": [
          "languages"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Language that meet the property=value search criteria"
      }
    },
    "/languages/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Language to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Language"
            }
          },
          "404": {
            "description": "Language not found"
          }
        },
        "tags": [
          "languages"
        ],
        "operationId": "delete",
        "summary": "Deletes a Language"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Language to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Language"
            }
          },
          "404": {
            "description": "Language not found"
          }
        },
        "tags": [
          "languages"
        ],
        "operationId": "read",
        "summary": "Displays a Language"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Language to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Language"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "languages"
        ],
        "operationId": "update",
        "summary": "Updates a Language.  See the Language model for details."
      }
    },
    "/medications": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          }
        },
        "tags": [
          "medications"
        ],
        "operationId": "readAll",
        "summary": "Fetch Medication"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "medications"
        ],
        "operationId": "create",
        "summary": "Creates a Medication.  See Medication model for details."
      }
    },
    "/medications/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          },
          "404": {
            "description": "Medication not found"
          }
        },
        "tags": [
          "medications"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Medication that meet the property=value search criteria"
      }
    },
    "/medications/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Medication to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          },
          "404": {
            "description": "Medication not found"
          }
        },
        "tags": [
          "medications"
        ],
        "operationId": "delete",
        "summary": "Deletes a Medication"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Medication to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          },
          "404": {
            "description": "Medication not found"
          }
        },
        "tags": [
          "medications"
        ],
        "operationId": "read",
        "summary": "Displays a Medication"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Medication to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Medication"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "medications"
        ],
        "operationId": "update",
        "summary": "Updates a Medication.  See the Medication model for details."
      }
    },
    "/militarydischargetypes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/MilitaryDischargeType"
            }
          }
        },
        "tags": [
          "militarydischargetypes"
        ],
        "operationId": "readAll",
        "summary": "Fetch MilitaryDischargeType"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/MilitaryDischargeType"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "militarydischargetypes"
        ],
        "operationId": "create",
        "summary": "Creates a MilitaryDischargeType.  See MilitaryDischargeType model for details."
      }
    },
    "/militarydischargetypes/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/MilitaryDischargeType"
            }
          },
          "404": {
            "description": "MilitaryDischargeType not found"
          }
        },
        "tags": [
          "militarydischargetypes"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays MilitaryDischargeType that meet the property=value search criteria"
      }
    },
    "/militarydischargetypes/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of MilitaryDischargeType to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/MilitaryDischargeType"
            }
          },
          "404": {
            "description": "MilitaryDischargeType not found"
          }
        },
        "tags": [
          "militarydischargetypes"
        ],
        "operationId": "delete",
        "summary": "Deletes a MilitaryDischargeType"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of MilitaryDischargeType to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/MilitaryDischargeType"
            }
          },
          "404": {
            "description": "MilitaryDischargeType not found"
          }
        },
        "tags": [
          "militarydischargetypes"
        ],
        "operationId": "read",
        "summary": "Displays a MilitaryDischargeType"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of MilitaryDischargeType to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/MilitaryDischargeType"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "militarydischargetypes"
        ],
        "operationId": "update",
        "summary": "Updates a MilitaryDischargeType.  See the MilitaryDischargeType model for details."
      }
    },
    "/people": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        },
        "tags": [
          "people"
        ],
        "operationId": "readAll",
        "summary": "Fetch Person"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "people"
        ],
        "operationId": "create",
        "summary": "Creates a Person.  See Person model for details."
      }
    },
    "/people/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "404": {
            "description": "Person not found"
          }
        },
        "tags": [
          "people"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Person that meet the property=value search criteria"
      }
    },
    "/people/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Person to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "404": {
            "description": "Person not found"
          }
        },
        "tags": [
          "people"
        ],
        "operationId": "delete",
        "summary": "Deletes a Person"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Person to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "404": {
            "description": "Person not found"
          }
        },
        "tags": [
          "people"
        ],
        "operationId": "read",
        "summary": "Displays a Person"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Person to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "people"
        ],
        "operationId": "update",
        "summary": "Updates a Person.  See the Person model for details."
      }
    },
    "/personaddresses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonAddress"
            }
          }
        },
        "tags": [
          "personaddresses"
        ],
        "operationId": "readAll",
        "summary": "Fetch PersonAddress"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonAddress"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "personaddresses"
        ],
        "operationId": "create",
        "summary": "Creates a PersonAddress.  See PersonAddress model for details."
      }
    },
    "/personaddresses/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonAddress"
            }
          },
          "404": {
            "description": "PersonAddress not found"
          }
        },
        "tags": [
          "personaddresses"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays PersonAddress that meet the property=value search criteria"
      }
    },
    "/personaddresses/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of PersonAddress to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonAddress"
            }
          },
          "404": {
            "description": "PersonAddress not found"
          }
        },
        "tags": [
          "personaddresses"
        ],
        "operationId": "delete",
        "summary": "Deletes a PersonAddress"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of PersonAddress to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonAddress"
            }
          },
          "404": {
            "description": "PersonAddress not found"
          }
        },
        "tags": [
          "personaddresses"
        ],
        "operationId": "read",
        "summary": "Displays a PersonAddress"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of PersonAddress to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonAddress"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "personaddresses"
        ],
        "operationId": "update",
        "summary": "Updates a PersonAddress.  See the PersonAddress model for details."
      }
    },
    "/personphones": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonPhone"
            }
          }
        },
        "tags": [
          "personphones"
        ],
        "operationId": "readAll",
        "summary": "Fetch PersonPhone"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonPhone"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "personphones"
        ],
        "operationId": "create",
        "summary": "Creates a PersonPhone.  See PersonPhone model for details."
      }
    },
    "/personphones/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonPhone"
            }
          },
          "404": {
            "description": "PersonPhone not found"
          }
        },
        "tags": [
          "personphones"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays PersonPhone that meet the property=value search criteria"
      }
    },
    "/personphones/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of PersonPhone to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonPhone"
            }
          },
          "404": {
            "description": "PersonPhone not found"
          }
        },
        "tags": [
          "personphones"
        ],
        "operationId": "delete",
        "summary": "Deletes a PersonPhone"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of PersonPhone to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonPhone"
            }
          },
          "404": {
            "description": "PersonPhone not found"
          }
        },
        "tags": [
          "personphones"
        ],
        "operationId": "read",
        "summary": "Displays a PersonPhone"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of PersonPhone to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/PersonPhone"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "personphones"
        ],
        "operationId": "update",
        "summary": "Updates a PersonPhone.  See the PersonPhone model for details."
      }
    },
    "/phones": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Phone"
            }
          }
        },
        "tags": [
          "phones"
        ],
        "operationId": "readAll",
        "summary": "Fetch Phone"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Phone"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "phones"
        ],
        "operationId": "create",
        "summary": "Creates a Phone.  See Phone model for details."
      }
    },
    "/phones/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Phone"
            }
          },
          "404": {
            "description": "Phone not found"
          }
        },
        "tags": [
          "phones"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Phone that meet the property=value search criteria"
      }
    },
    "/phones/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Phone to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Phone"
            }
          },
          "404": {
            "description": "Phone not found"
          }
        },
        "tags": [
          "phones"
        ],
        "operationId": "delete",
        "summary": "Deletes a Phone"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Phone to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Phone"
            }
          },
          "404": {
            "description": "Phone not found"
          }
        },
        "tags": [
          "phones"
        ],
        "operationId": "read",
        "summary": "Displays a Phone"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Phone to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Phone"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "phones"
        ],
        "operationId": "update",
        "summary": "Updates a Phone.  See the Phone model for details."
      }
    },
    "/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "operationId": "readAll",
        "summary": "Fetch Role"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "roles"
        ],
        "operationId": "create",
        "summary": "Creates a Role.  See Role model for details."
      }
    },
    "/roles/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "404": {
            "description": "Role not found"
          }
        },
        "tags": [
          "roles"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Role that meet the property=value search criteria"
      }
    },
    "/roles/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Role to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "404": {
            "description": "Role not found"
          }
        },
        "tags": [
          "roles"
        ],
        "operationId": "delete",
        "summary": "Deletes a Role"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Role to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "404": {
            "description": "Role not found"
          }
        },
        "tags": [
          "roles"
        ],
        "operationId": "read",
        "summary": "Displays a Role"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of Role to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "roles"
        ],
        "operationId": "update",
        "summary": "Updates a Role.  See the Role model for details."
      }
    },
    "/schools": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/School"
            }
          }
        },
        "tags": [
          "schools"
        ],
        "operationId": "readAll",
        "summary": "Fetch School"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/School"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "schools"
        ],
        "operationId": "create",
        "summary": "Creates a School.  See School model for details."
      }
    },
    "/schools/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/School"
            }
          },
          "404": {
            "description": "School not found"
          }
        },
        "tags": [
          "schools"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays School that meet the property=value search criteria"
      }
    },
    "/schools/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of School to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/School"
            }
          },
          "404": {
            "description": "School not found"
          }
        },
        "tags": [
          "schools"
        ],
        "operationId": "delete",
        "summary": "Deletes a School"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of School to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/School"
            }
          },
          "404": {
            "description": "School not found"
          }
        },
        "tags": [
          "schools"
        ],
        "operationId": "read",
        "summary": "Displays a School"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of School to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/School"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "schools"
        ],
        "operationId": "update",
        "summary": "Updates a School.  See the School model for details."
      }
    },
    "/shelterclientadditionalstaff": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientAdditionalStaff"
            }
          }
        },
        "tags": [
          "shelterclientadditionalstaff"
        ],
        "operationId": "readAll",
        "summary": "Fetch ShelterClientAdditionalStaff"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientAdditionalStaff"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclientadditionalstaff"
        ],
        "operationId": "create",
        "summary": "Creates a ShelterClientAdditionalStaff.  See ShelterClientAdditionalStaff model for details."
      }
    },
    "/shelterclientadditionalstaff/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientAdditionalStaff"
            }
          },
          "404": {
            "description": "ShelterClientAdditionalStaff not found"
          }
        },
        "tags": [
          "shelterclientadditionalstaff"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays ShelterClientAdditionalStaff that meet the property=value search criteria"
      }
    },
    "/shelterclientadditionalstaff/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientAdditionalStaff to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientAdditionalStaff"
            }
          },
          "404": {
            "description": "ShelterClientAdditionalStaff not found"
          }
        },
        "tags": [
          "shelterclientadditionalstaff"
        ],
        "operationId": "delete",
        "summary": "Deletes a ShelterClientAdditionalStaff"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientAdditionalStaff to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientAdditionalStaff"
            }
          },
          "404": {
            "description": "ShelterClientAdditionalStaff not found"
          }
        },
        "tags": [
          "shelterclientadditionalstaff"
        ],
        "operationId": "read",
        "summary": "Displays a ShelterClientAdditionalStaff"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientAdditionalStaff to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientAdditionalStaff"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclientadditionalstaff"
        ],
        "operationId": "update",
        "summary": "Updates a ShelterClientAdditionalStaff.  See the ShelterClientAdditionalStaff model for details."
      }
    },
    "/shelterclientfundingsources": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientFundingSource"
            }
          }
        },
        "tags": [
          "shelterclientfundingsources"
        ],
        "operationId": "readAll",
        "summary": "Fetch ShelterClientFundingSource"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientFundingSource"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclientfundingsources"
        ],
        "operationId": "create",
        "summary": "Creates a ShelterClientFundingSource.  See ShelterClientFundingSource model for details."
      }
    },
    "/shelterclientfundingsources/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientFundingSource"
            }
          },
          "404": {
            "description": "ShelterClientFundingSource not found"
          }
        },
        "tags": [
          "shelterclientfundingsources"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays ShelterClientFundingSource that meet the property=value search criteria"
      }
    },
    "/shelterclientfundingsources/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientFundingSource to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientFundingSource"
            }
          },
          "404": {
            "description": "ShelterClientFundingSource not found"
          }
        },
        "tags": [
          "shelterclientfundingsources"
        ],
        "operationId": "delete",
        "summary": "Deletes a ShelterClientFundingSource"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientFundingSource to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientFundingSource"
            }
          },
          "404": {
            "description": "ShelterClientFundingSource not found"
          }
        },
        "tags": [
          "shelterclientfundingsources"
        ],
        "operationId": "read",
        "summary": "Displays a ShelterClientFundingSource"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientFundingSource to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientFundingSource"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclientfundingsources"
        ],
        "operationId": "update",
        "summary": "Updates a ShelterClientFundingSource.  See the ShelterClientFundingSource model for details."
      }
    },
    "/shelterclientidentitypreferences": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientIdentityPreference"
            }
          }
        },
        "tags": [
          "shelterclientidentitypreferences"
        ],
        "operationId": "readAll",
        "summary": "Fetch ShelterClientIdentityPreference"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientIdentityPreference"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclientidentitypreferences"
        ],
        "operationId": "create",
        "summary": "Creates a ShelterClientIdentityPreference.  See ShelterClientIdentityPreference model for details."
      }
    },
    "/shelterclientidentitypreferences/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientIdentityPreference"
            }
          },
          "404": {
            "description": "ShelterClientIdentityPreference not found"
          }
        },
        "tags": [
          "shelterclientidentitypreferences"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays ShelterClientIdentityPreference that meet the property=value search criteria"
      }
    },
    "/shelterclientidentitypreferences/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientIdentityPreference to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientIdentityPreference"
            }
          },
          "404": {
            "description": "ShelterClientIdentityPreference not found"
          }
        },
        "tags": [
          "shelterclientidentitypreferences"
        ],
        "operationId": "delete",
        "summary": "Deletes a ShelterClientIdentityPreference"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientIdentityPreference to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientIdentityPreference"
            }
          },
          "404": {
            "description": "ShelterClientIdentityPreference not found"
          }
        },
        "tags": [
          "shelterclientidentitypreferences"
        ],
        "operationId": "read",
        "summary": "Displays a ShelterClientIdentityPreference"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClientIdentityPreference to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClientIdentityPreference"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclientidentitypreferences"
        ],
        "operationId": "update",
        "summary": "Updates a ShelterClientIdentityPreference.  See the ShelterClientIdentityPreference model for details."
      }
    },
    "/shelterclients": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClient"
            }
          }
        },
        "tags": [
          "shelterclients"
        ],
        "operationId": "readAll",
        "summary": "Fetch ShelterClient"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClient"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclients"
        ],
        "operationId": "create",
        "summary": "Creates a ShelterClient.  See ShelterClient model for details."
      }
    },
    "/shelterclients/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClient"
            }
          },
          "404": {
            "description": "ShelterClient not found"
          }
        },
        "tags": [
          "shelterclients"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays ShelterClient that meet the property=value search criteria"
      }
    },
    "/shelterclients/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClient to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClient"
            }
          },
          "404": {
            "description": "ShelterClient not found"
          }
        },
        "tags": [
          "shelterclients"
        ],
        "operationId": "delete",
        "summary": "Deletes a ShelterClient"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClient to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClient"
            }
          },
          "404": {
            "description": "ShelterClient not found"
          }
        },
        "tags": [
          "shelterclients"
        ],
        "operationId": "read",
        "summary": "Displays a ShelterClient"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of ShelterClient to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/ShelterClient"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "shelterclients"
        ],
        "operationId": "update",
        "summary": "Updates a ShelterClient.  See the ShelterClient model for details."
      }
    },
    "/statedata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/StateData"
            }
          }
        },
        "tags": [
          "statedata"
        ],
        "operationId": "readAll",
        "summary": "Fetch StateData"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/StateData"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "statedata"
        ],
        "operationId": "create",
        "summary": "Creates a StateData.  See StateData model for details."
      }
    },
    "/statedata/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/StateData"
            }
          },
          "404": {
            "description": "StateData not found"
          }
        },
        "tags": [
          "statedata"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays StateData that meet the property=value search criteria"
      }
    },
    "/statedata/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of StateData to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/StateData"
            }
          },
          "404": {
            "description": "StateData not found"
          }
        },
        "tags": [
          "statedata"
        ],
        "operationId": "delete",
        "summary": "Deletes a StateData"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of StateData to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/StateData"
            }
          },
          "404": {
            "description": "StateData not found"
          }
        },
        "tags": [
          "statedata"
        ],
        "operationId": "read",
        "summary": "Displays a StateData"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of StateData to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/StateData"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "statedata"
        ],
        "operationId": "update",
        "summary": "Updates a StateData.  See the StateData model for details."
      }
    },
    "/userroles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          }
        },
        "tags": [
          "userroles"
        ],
        "operationId": "readAll",
        "summary": "Fetch UserRole"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "userroles"
        ],
        "operationId": "create",
        "summary": "Creates a UserRole.  See UserRole model for details."
      }
    },
    "/userroles/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "404": {
            "description": "UserRole not found"
          }
        },
        "tags": [
          "userroles"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays UserRole that meet the property=value search criteria"
      }
    },
    "/userroles/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of UserRole to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "404": {
            "description": "UserRole not found"
          }
        },
        "tags": [
          "userroles"
        ],
        "operationId": "delete",
        "summary": "Deletes a UserRole"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of UserRole to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "404": {
            "description": "UserRole not found"
          }
        },
        "tags": [
          "userroles"
        ],
        "operationId": "read",
        "summary": "Displays a UserRole"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of UserRole to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "userroles"
        ],
        "operationId": "update",
        "summary": "Updates a UserRole.  See the UserRole model for details."
      }
    },
    "/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "readAll",
        "summary": "Fetch Users"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "create",
        "summary": "Creates a User.  See User model for details."
      }
    },
    "/users/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays Users that meet the property=value search criteria"
      }
    },
    "/users/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of User to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "delete",
        "summary": "Deletes a User"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of User to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "read",
        "summary": "Displays a User"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of User to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "update",
        "summary": "Updates a User.  See the User model for details."
      }
    },
    "/veterans": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Veteran"
            }
          }
        },
        "tags": [
          "veterans"
        ],
        "operationId": "readAll",
        "summary": "Fetch veterans"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Veteran"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "veterans"
        ],
        "operationId": "create",
        "summary": "Creates a veteran.  See Veteran model for details."
      }
    },
    "/veterans/{filter}/{value}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "property to search for in the related model.",
            "in": "path",
            "name": "filter",
            "required": true,
            "type": "string"
          },
          {
            "description": "value to search for, given the property.",
            "in": "path",
            "name": "value",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Veteran"
            }
          },
          "404": {
            "description": "veteran not found"
          }
        },
        "tags": [
          "veterans"
        ],
        "operationId": "readAllWithFilter",
        "summary": "Displays veterans that meet the property=value search criteria"
      }
    },
    "/veterans/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of veteran to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Veteran"
            }
          },
          "404": {
            "description": "veteran not found"
          }
        },
        "tags": [
          "veterans"
        ],
        "operationId": "delete",
        "summary": "Deletes a veteran"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of veteran to fetch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Veteran"
            }
          },
          "404": {
            "description": "veteran not found"
          }
        },
        "tags": [
          "veterans"
        ],
        "operationId": "read",
        "summary": "Displays a veteran"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of veteran to update",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Veteran"
            }
          },
          "400": {
            "description": "Error occurred"
          }
        },
        "tags": [
          "veterans"
        ],
        "operationId": "update",
        "summary": "Updates a veteran.  See the Veteran model for details."
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "The \"address\" model.",
      "properties": {
        "apartment_number": {
          "type": "integer"
        },
        "city_data_id": {
          "type": "integer"
        },
        "county_data_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "state_data_id": {
          "type": "integer"
        },
        "street_name": {
          "type": "string"
        },
        "street_number": {
          "type": "integer"
        },
        "street_suffix": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "zipcode": {
          "type": "integer"
        },
        "zipcode_plus_four": {
          "type": "integer"
        }
      },
      "required": [
        "city_data_id",
        "created_at",
        "id",
        "state_data_id",
        "street_name",
        "updated_at",
        "updated_by",
        "zipcode"
      ]
    },
    "BranchOfService": {
      "description": "The \"branch_of_service\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "CityData": {
      "description": "The \"city_data\" model",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "CityDataExtended": {
      "description": "The \"city_data_extended\" model.",
      "properties": {
        "city": {
          "type": "string"
        },
        "county": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "state_code": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "zip": {
          "type": "integer"
        }
      },
      "required": [
        "city",
        "county",
        "created_at",
        "id",
        "latitude",
        "longitude",
        "state_code",
        "updated_at",
        "updated_by",
        "zip"
      ]
    },
    "Client": {
      "description": "The \"client\" model.",
      "properties": {
        "has_family_who_is_service_member_or_veteran": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "is_referred_by_veteran_resource_center": {
          "type": "boolean"
        },
        "is_service_member_or_veteran": {
          "type": "boolean"
        },
        "place_of_employment": {
          "type": "string"
        },
        "referral": {
          "type": "string"
        },
        "social_security_number": {
          "type": "integer"
        }
      },
      "required": [
        "has_family_who_is_service_member_or_veteran",
        "id",
        "is_referred_by_veteran_resource_center",
        "is_service_member_or_veteran",
        "place_of_employment",
        "social_security_number"
      ]
    },
    "ClientEthnicity": {
      "description": "The \"client_ethnicity\" model.",
      "properties": {
        "client_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "ethnicity_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "client_id",
        "created_at",
        "ethnicity_id",
        "id",
        "updated_at",
        "updated_by"
      ]
    },
    "ClientLanguage": {
      "description": "The \"client_language\" model.",
      "properties": {
        "client_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "is_primary": {
          "type": "boolean"
        },
        "language_id": {
          "type": "integer"
        },
        "other_note": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "client_id",
        "created_at",
        "id",
        "is_primary",
        "language_id",
        "updated_at",
        "updated_by"
      ]
    },
    "Counselee": {
      "description": "The \"counselee\" model.",
      "properties": {
        "abused_by_whom": {
          "type": "string"
        },
        "abused_count": {
          "type": "integer"
        },
        "alcohol_problem": {
          "type": "boolean"
        },
        "black_out_date": {
          "type": "string"
        },
        "black_out_location": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "current_counselor": {
          "type": "string"
        },
        "current_harm_others": {
          "type": "boolean"
        },
        "current_harm_self": {
          "type": "boolean"
        },
        "current_harm_self_example": {
          "type": "string"
        },
        "currently_in_counseling": {
          "type": "boolean"
        },
        "famil_drug_problem_other_detail": {
          "type": "string"
        },
        "family_drug_alcohol_problem": {
          "type": "string"
        },
        "had_black_out": {
          "type": "boolean"
        },
        "had_previous_counseling": {
          "type": "boolean"
        },
        "has_been_abused": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "past_harm_others": {
          "type": "boolean"
        },
        "past_harm_others_example": {
          "type": "string"
        },
        "past_harm_self": {
          "type": "boolean"
        },
        "past_harm_self_example": {
          "type": "string"
        },
        "previous_counseling_when": {
          "type": "string"
        },
        "previous_counseling_where": {
          "type": "integer"
        },
        "serious_family_problems_desc": {
          "type": "string"
        },
        "serious_problems_in_family": {
          "type": "boolean"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "abused_by_whom",
        "abused_count",
        "alcohol_problem",
        "black_out_date",
        "created_at",
        "current_counselor",
        "current_harm_others",
        "current_harm_self",
        "current_harm_self_example",
        "currently_in_counseling",
        "family_drug_alcohol_problem",
        "had_black_out",
        "had_previous_counseling",
        "has_been_abused",
        "id",
        "past_harm_others",
        "past_harm_others_example",
        "past_harm_self",
        "past_harm_self_example",
        "previous_counseling_when",
        "previous_counseling_where",
        "serious_problems_in_family",
        "updated_at",
        "updated_by"
      ]
    },
    "CounseleeChild": {
      "description": "The \"counselee_child\" model.",
      "properties": {
        "id": {
          "type": "integer"
        },
        "long_standing_illnesses": {
          "type": "string"
        },
        "school_id": {
          "type": "integer"
        },
        "school_problems": {
          "type": "string"
        },
        "who_else_raised_child": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "school_id"
      ]
    },
    "CounseleeChildBioParent": {
      "description": "The \"counselee_child_bio_parent\" model.",
      "properties": {
        "age": {
          "type": "integer"
        },
        "age_at_death": {
          "type": "integer"
        },
        "cause_of_death": {
          "type": "string"
        },
        "child_age_when_bio_died": {
          "type": "integer"
        },
        "counselee_child_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "health_problems": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "is_deceased": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "occupation": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "age",
        "counselee_child_id",
        "created_at",
        "id",
        "is_deceased",
        "name",
        "occupation",
        "type",
        "updated_at",
        "updated_by"
      ]
    },
    "CounseleeChildGuardian": {
      "description": "The \"counselee_child_guardian\" model.",
      "properties": {
        "age": {
          "type": "integer"
        },
        "counselee_child_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "date_first_lived_with_child": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "is_currently_living_with_child": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "occupation": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "age",
        "counselee_child_id",
        "created_at",
        "date_first_lived_with_child",
        "id",
        "is_currently_living_with_child",
        "name",
        "occupation",
        "updated_at",
        "updated_by"
      ]
    },
    "CounseleeChildSibling": {
      "description": "The \"counselee_child_sibling\" model.",
      "properties": {
        "age": {
          "type": "integer"
        },
        "age_at_death": {
          "type": "integer"
        },
        "counselee_child_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "gender_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "is_dead": {
          "type": "boolean"
        },
        "relationship_desc": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "age",
        "age_at_death",
        "counselee_child_id",
        "created_at",
        "gender_id",
        "id",
        "is_dead",
        "relationship_desc",
        "type",
        "updated_at",
        "updated_by"
      ]
    },
    "CounseleeCounselingTopic": {
      "description": "The \"counselee_counseling_topic\" model.",
      "properties": {
        "counselee_id": {
          "type": "integer"
        },
        "counseling_topic_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "other_note": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "counselee_id",
        "counseling_topic_id",
        "created_at",
        "id",
        "updated_at",
        "updated_by"
      ]
    },
    "CounseleeDrugUse": {
      "description": "The \"counselee_drug_use\" model.",
      "properties": {
        "age_when_first_used": {
          "type": "integer"
        },
        "counselee_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "drug_use_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "age_when_first_used",
        "counselee_id",
        "created_at",
        "drug_use_id",
        "id",
        "updated_at",
        "updated_by"
      ]
    },
    "CounseleeMedication": {
      "description": "The \"counselee_medication\" model.",
      "properties": {
        "counselee_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "medication_id": {
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "counselee_id",
        "created_at",
        "id",
        "medication_id",
        "reason",
        "updated_at",
        "updated_by"
      ]
    },
    "CounselingTopic": {
      "description": "The \"counseling_topic\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "topic": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "topic",
        "updated_at",
        "updated_by"
      ]
    },
    "CountyData": {
      "description": "The \"county_data\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "DrugUse": {
      "description": "The \"drug_use\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "type",
        "updated_at",
        "updated_by"
      ]
    },
    "Ethnicity": {
      "description": "The \"ethnicity\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "FundingSource": {
      "description": "The \"funding_source\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "Gender": {
      "description": "The \"gender\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "IdentityPreference": {
      "description": "The \"identity_preference\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "Language": {
      "description": "The \"language\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "Medication": {
      "description": "The \"medication\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "MilitaryDischargeType": {
      "description": "The \"military_discharge_type\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "Person": {
      "description": "The \"person\" model.",
      "properties": {
        "age": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "date_of_birth": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "gender_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "last_name": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "date_of_birth",
        "first_name",
        "gender_id",
        "id",
        "last_name",
        "updated_at",
        "updated_by"
      ]
    },
    "PersonAddress": {
      "description": "The \"person_address\" model.",
      "properties": {
        "address_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "is_primary": {
          "type": "boolean"
        },
        "person_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "address_id",
        "created_at",
        "id",
        "is_primary",
        "person_id",
        "updated_at",
        "updated_by"
      ]
    },
    "PersonPhone": {
      "description": "The \"person_phone\" model.",
      "properties": {
        "can_call": {
          "type": "boolean"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "is_primary": {
          "type": "boolean"
        },
        "person_id": {
          "type": "integer"
        },
        "phone_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "can_call",
        "created_at",
        "id",
        "is_primary",
        "person_id",
        "phone_id",
        "updated_at",
        "updated_by"
      ]
    },
    "Phone": {
      "description": "The \"phone\" model.",
      "properties": {
        "area_code": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "extension": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "phone_number": {
          "type": "integer"
        },
        "phone_type": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "area_code",
        "created_at",
        "id",
        "phone_number",
        "phone_type",
        "updated_at",
        "updated_by"
      ]
    },
    "Role": {
      "description": "The \"role\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "updated_at",
        "updated_by"
      ]
    },
    "School": {
      "description": "The \"school\" model.",
      "properties": {
        "city_data_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "state_data_id": {
          "type": "integer"
        },
        "street": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "zipcode": {
          "type": "integer"
        },
        "zipcode_plus_four": {
          "type": "string"
        }
      },
      "required": [
        "city_data_id",
        "created_at",
        "id",
        "name",
        "state_data_id",
        "street",
        "updated_at",
        "updated_by",
        "zipcode"
      ]
    },
    "ShelterClient": {
      "description": "The \"shelter_client\" model",
      "properties": {
        "advocate_user_id": {
          "type": "integer"
        },
        "assistant_name": {
          "type": "string"
        },
        "assistant_relationship": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "enter_date": {
          "type": "string"
        },
        "exit_date": {
          "type": "string"
        },
        "has_tanf_form_": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "is_rural": {
          "type": "boolean"
        },
        "is_urban": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "used_form_assistance": {
          "type": "boolean"
        }
      },
      "required": [
        "created_at",
        "id",
        "updated_at",
        "updated_by",
        "used_form_assistance"
      ]
    },
    "ShelterClientAdditionalStaff": {
      "description": "The \"shelter_client_additional_staff\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "shelter_client_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "shelter_client_id",
        "updated_at",
        "updated_by",
        "user_id"
      ]
    },
    "ShelterClientFundingSource": {
      "description": "The \"shelter_client_funding_source\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "funding_source_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "shelter_client_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "funding_source_id",
        "id",
        "shelter_client_id",
        "updated_at",
        "updated_by"
      ]
    },
    "ShelterClientIdentityPreference": {
      "description": "The \"shelter_client_identity_preference\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "identity_preference_id": {
          "type": "integer"
        },
        "shelter_client_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "identity_preference_id",
        "shelter_client_id",
        "updated_at",
        "updated_by"
      ]
    },
    "StateData": {
      "description": "The \"state_data\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "stage_code": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "name",
        "stage_code",
        "updated_at",
        "updated_by"
      ]
    },
    "User": {
      "description": "The \"user\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "is_disabled": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "password_created_at": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "created_at",
        "email",
        "id",
        "is_disabled",
        "password",
        "password_created_at",
        "updated_at",
        "updated_by",
        "username"
      ]
    },
    "UserRole": {
      "description": "The \"user_role\" model.",
      "properties": {
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "role_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "id",
        "role_id",
        "updated_at",
        "updated_by",
        "user_id"
      ]
    },
    "Veteran": {
      "description": "The \"veteran\" model.",
      "properties": {
        "branch_of_service_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "integer"
        },
        "has_dd214": {
          "type": "boolean"
        },
        "household_income": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "is_homeless": {
          "type": "boolean"
        },
        "is_on_disability": {
          "type": "boolean"
        },
        "is_registered_with_va": {
          "type": "boolean"
        },
        "job_title": {
          "type": "string"
        },
        "military_discharge_type_id": {
          "type": "integer"
        },
        "referred_by": {
          "type": "string"
        },
        "updated_at": {
          "type": "integer"
        },
        "updated_by": {
          "type": "integer"
        },
        "va_id": {
          "type": "integer"
        }
      },
      "required": [
        "branch_of_service_id",
        "created_at",
        "has_dd214",
        "household_income",
        "id",
        "is_homeless",
        "is_on_disability",
        "is_registered_with_va",
        "military_discharge_type_id",
        "referred_by",
        "updated_at",
        "updated_by"
      ]
    }
  },
  "tags": [
    {
      "description": "Address operations",
      "name": "addresses"
    },
    {
      "description": "Branch Of Service operations",
      "name": "branchesofservice"
    },
    {
      "description": "City data operations",
      "name": "citydata"
    },
    {
      "description": "Extended city data operations",
      "name": "citydataextended"
    },
    {
      "description": "ClientEthnicity operations",
      "name": "clientethnicities"
    },
    {
      "description": "Client Language operations",
      "name": "clientlanguages"
    },
    {
      "description": "Client operations",
      "name": "clients"
    },
    {
      "description": "Counselee Child Bio Parent operations",
      "name": "counseleechildbioparents"
    },
    {
      "description": "CounseleeChildGuardian operations",
      "name": "counseleechildguardians"
    },
    {
      "description": "CounseleeChild operations",
      "name": "counseleechildren"
    },
    {
      "description": "CounseleeChildSibling operations",
      "name": "counseleechildsiblings"
    },
    {
      "description": "CounseleeCounselingTopic operations",
      "name": "counseleecounselingtopics"
    },
    {
      "description": "CounseleeDrugUse operations",
      "name": "counseleedruguses"
    },
    {
      "description": "CounseleeMedication operations",
      "name": "counseleemedications"
    },
    {
      "description": "Counselee operations",
      "name": "counselees"
    },
    {
      "description": "CounselingTopic operations",
      "name": "counselingtopics"
    },
    {
      "description": "CountyData operations",
      "name": "countydata"
    },
    {
      "description": "DrugUse operations",
      "name": "druguses"
    },
    {
      "description": "Ethnicity operations",
      "name": "ethnicities"
    },
    {
      "description": "FundingSource operations",
      "name": "fundingsources"
    },
    {
      "description": "Gender operations",
      "name": "genders"
    },
    {
      "description": "IdentityPreference operations",
      "name": "identitypreferences"
    },
    {
      "description": "Language operations",
      "name": "languages"
    },
    {
      "description": "Medication operations",
      "name": "medications"
    },
    {
      "description": "MilitaryDischargeType operations",
      "name": "militarydischargetypes"
    },
    {
      "description": "Person operations",
      "name": "people"
    },
    {
      "description": "PersonAddress operations",
      "name": "personaddresses"
    },
    {
      "description": "PersonPhone operations",
      "name": "personphones"
    },
    {
      "description": "Phone operations",
      "name": "phones"
    },
    {
      "description": "Role operations",
      "name": "roles"
    },
    {
      "description": "School operations",
      "name": "schools"
    },
    {
      "description": "ShelterClientAdditionalStaff operations",
      "name": "shelterclientadditionalstaff"
    },
    {
      "description": "ShelterClientFundingSource operations",
      "name": "shelterclientfundingsources"
    },
    {
      "description": "ShelterClientIdentityPreference operations",
      "name": "shelterclientidentitypreferences"
    },
    {
      "description": "ShelterClient operations",
      "name": "shelterclients"
    },
    {
      "description": "StateData operations",
      "name": "statedata"
    },
    {
      "description": "UserRole operations",
      "name": "userroles"
    },
    {
      "description": "User operations",
      "name": "users"
    },
    {
      "description": "Veteran operations",
      "name": "veterans"
    }
  ]
}
